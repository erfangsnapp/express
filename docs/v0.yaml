openapi: 3.1.0
info:
  title: Express service API
  description: Express service for validating and changing status of the trips
  version: 0.0.9
servers:
  - url: https://localhost:8080/api/v0
tags:
  - name: trip
    description: Assigning and modifying trips
paths:
  /trip/{tripId}:
    get:
      tags:
        - trip
      summary: Getting details of a trip
      description: Retrieve a trip
      parameters:
        - name: tripId
          in: path
          description: ID of trip to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Invalid ID supplied]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Not Found]

    post:
      tags:
        - trip
      summary: creating a trip
      description: Add a new trip in express service
      requestBody:
        description: Add a new trip in express service
        content:
          application/json:
            schema:
              type: object
              properties:
                vendor_id:
                  type: integer
                  format: int64
                  description: Vendor id
                origin:
                  $ref: '#/components/schemas/Location'
                destination:
                  $ref: '#/components/schemas/Location'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Trip id
                    examples: [145039502634]
                  status:
                    type: string
                    examples: [requested]
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Invalid Input]

  /trip/{tripId}/assign:
    post:
      tags:
        - trip
      summary: Assigning a biker to a trip
      description: this will change status of the trip to assigned and set the biker for the trip.
      parameters:
        - name: tripId
          in: path
          description: ID of trip to assign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Assign a biker to a trip
        content:
          application/json:
            schema:
              type: object
              properties:
                biker_id:
                  type: integer
                  format: int64
                  description: Biker id
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Trip id
                    examples: [145039502634]
                  status:
                    type: string
                    examples: [assigned]
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples: [Invalid Input]
        '404':
          description: Trip/Biker Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Trip:
                  value:
                    message: "Trip Not Found"
                Biker:
                  value:
                    message: "Biker Not Found"
        '409':
          description: Trip Already assigned
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Trip Already Assigned]

  /trip/{tripId}/status:
    put:
      tags:
        - trip
      summary: changing status of a trip
      parameters:
        - name: tripId
          in: path
          description: ID of trip to assign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Change status of a trip
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Status of the trip
                  examples: [picked]
                  enum:
                    - requested
                    - assigned
                    - acked
                    - picked
                    - delivered
                    - canceled
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Trip id
                    examples: [ 145039502634 ]
                  status:
                    type: string
                    examples: [picked]
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
              examples:
                InvalidInput:
                  value:
                    message: "Invalid Input"
                FarFromDestination:
                  value:
                    message: "Biker is too far from the destination"
                FarFromOrigin:
                  value:
                    message: "Biker is too far from the origin"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples:
                      [ Forbidden ]
        '404':
          description: Trip Not Found
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples:
                      [ Trip Not Found ]
        '409':
          description: Invalid Status (backward status setting)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples:
                      [ Invalid Status ]

  /biker/{bikerId}:
    get:
      tags:
        - biker
      summary: Getting details of a biker
      description: Retrieve a biker
      parameters:
          - name: bikerId
            in: path
            description: ID of biker to return
            required: true
            schema:
                type: integer
                format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Biker'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Invalid ID supplied]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples: [Not Found]




    put:
      tags:
        - biker
      summary: updating location of a biker
      parameters:
        - name: bikerId
          in: path
          description: ID of biker to update location
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Change location of a biker
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  $ref: '#/components/schemas/Location'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Biker'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
              examples:
                InvalidInput:
                  value:
                    message: "Invalid Input"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples:
                      [ Forbidden ]
        '404':
          description: Biker Not Found
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    examples:
                      [ Biker Not Found ]


components:
  schemas:
    Location:
      type: object
      properties:
        latitude:
          type: number
          format: float
          examples: [37.7749]
        longitude:
          type: number
          format: float
          examples: [-122.4194]
    Trip:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [13592966]
        biker:
          $ref: '#/components/schemas/Biker'
        status:
          type: string
          description: Trip status
          examples: [assigned]
          enum:
            - requested
            - assigned
            - acked
            - picked
            - delivered
            - canceled
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
    Biker:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [198772]
        location:
          $ref: '#/components/schemas/Location'

